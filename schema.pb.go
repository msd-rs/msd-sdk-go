// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.18.1
// source: schema.proto

package msd

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 字段的存储方式
type FieldOp int32

const (
	// 直接存储
	FieldOp_Save FieldOp = 0
	// 如果时第一个则存储
	FieldOp_SaveFirst FieldOp = 1
	// 跟当前值比较，存较大的
	FieldOp_SaveMax FieldOp = 2
	// 跟当前值比较，存较小的
	FieldOp_SaveMin FieldOp = 3
	// 累加到当前值
	FieldOp_Inc FieldOp = 4
	// 跟当上次值做减后存储 *需要状态存储
	FieldOp_DiffPrevios FieldOp = 5
	// 跟第一个值做减后存储 *需要状态存储
	FieldOp_DiffFirst FieldOp = 6
	// 计数，每次有更新加1
	FieldOp_Count FieldOp = 7
	// 平均值
	FieldOp_Avg FieldOp = 8
	// 无重复的计数，无额外设置时，以提供的值进行统计，如果设置了 op_params, 支持以提供的值从meta表中取数，其中
	// op_params.src_field 为JSONB的查询路径
	// op_params.src_schema 为meta表的表名
	// op_params.trigger_field 如果设置，那么当trigger_field不为空/0时进行计算
	FieldOp_Distinct FieldOp = 9
)

// Enum value maps for FieldOp.
var (
	FieldOp_name = map[int32]string{
		0: "Save",
		1: "SaveFirst",
		2: "SaveMax",
		3: "SaveMin",
		4: "Inc",
		5: "DiffPrevios",
		6: "DiffFirst",
		7: "Count",
		8: "Avg",
		9: "Distinct",
	}
	FieldOp_value = map[string]int32{
		"Save":        0,
		"SaveFirst":   1,
		"SaveMax":     2,
		"SaveMin":     3,
		"Inc":         4,
		"DiffPrevios": 5,
		"DiffFirst":   6,
		"Count":       7,
		"Avg":         8,
		"Distinct":    9,
	}
)

func (x FieldOp) Enum() *FieldOp {
	p := new(FieldOp)
	*p = x
	return p
}

func (x FieldOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldOp) Descriptor() protoreflect.EnumDescriptor {
	return file_schema_proto_enumTypes[0].Descriptor()
}

func (FieldOp) Type() protoreflect.EnumType {
	return &file_schema_proto_enumTypes[0]
}

func (x FieldOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldOp.Descriptor instead.
func (FieldOp) EnumDescriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{0}
}

type OpParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 待统计的字段, 不同的OP会有不同的含义
	SrcField *string `protobuf:"bytes,1,opt,name=src_field,json=srcField,proto3,oneof" json:"src_field,omitempty"`
	// 带统计字段所属的 schema, 不同的OP会有不同的含义
	SrcSchema *string `protobuf:"bytes,2,opt,name=src_schema,json=srcSchema,proto3,oneof" json:"src_schema,omitempty"`
	// 如果设置，那么当trigger_field不为空/0时进行计算
	TriggerField *string `protobuf:"bytes,4,opt,name=trigger_field,json=triggerField,proto3,oneof" json:"trigger_field,omitempty"`
}

func (x *OpParams) Reset() {
	*x = OpParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpParams) ProtoMessage() {}

func (x *OpParams) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpParams.ProtoReflect.Descriptor instead.
func (*OpParams) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{0}
}

func (x *OpParams) GetSrcField() string {
	if x != nil && x.SrcField != nil {
		return *x.SrcField
	}
	return ""
}

func (x *OpParams) GetSrcSchema() string {
	if x != nil && x.SrcSchema != nil {
		return *x.SrcSchema
	}
	return ""
}

func (x *OpParams) GetTriggerField() string {
	if x != nil && x.TriggerField != nil {
		return *x.TriggerField
	}
	return ""
}

// 字段定义
// 字段可以分为3类
// - 直接存储的字段: 例如股票的价格
// - 统计字段: 如最高价
// - 计算字段: 如涨幅 (当前价-之前价格)/之前价格
type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 字段名
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 字段类型
	Dtype FieldKind `protobuf:"varint,2,opt,name=dtype,proto3,enum=dataframe.FieldKind" json:"dtype,omitempty"`
	// 引用的数据列序号, 对于有些统计字段, 需要指出其来源字段
	Refer uint32 `protobuf:"varint,3,opt,name=refer,proto3" json:"refer,omitempty"`
	// 字段的计算方式
	Op FieldOp `protobuf:"varint,4,opt,name=op,proto3,enum=schema.FieldOp" json:"op,omitempty"`
	/// 未设置时是否复制上一笔的值
	Paste bool `protobuf:"varint,5,opt,name=paste,proto3" json:"paste,omitempty"`
	// 计算字段的表达式
	Expr *string `protobuf:"bytes,6,opt,name=expr,proto3,oneof" json:"expr,omitempty"`
	// 对于有些统计方式，附带的参数，如 distinct, 可指明来源数据
	OpParams *OpParams `protobuf:"bytes,7,opt,name=op_params,json=opParams,proto3,oneof" json:"op_params,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{1}
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetDtype() FieldKind {
	if x != nil {
		return x.Dtype
	}
	return FieldKind_Empty
}

func (x *Field) GetRefer() uint32 {
	if x != nil {
		return x.Refer
	}
	return 0
}

func (x *Field) GetOp() FieldOp {
	if x != nil {
		return x.Op
	}
	return FieldOp_Save
}

func (x *Field) GetPaste() bool {
	if x != nil {
		return x.Paste
	}
	return false
}

func (x *Field) GetExpr() string {
	if x != nil && x.Expr != nil {
		return *x.Expr
	}
	return ""
}

func (x *Field) GetOpParams() *OpParams {
	if x != nil {
		return x.OpParams
	}
	return nil
}

// 数据结构定义
// 数据可以在内存中保留一部分, 以便降低对存储的频繁访问, 提高请求QPS, 一般来说, 设置内存和存储中一块相同的数目足以应对大多数场景,
// 但对于有大量标的, 写多读少的场景, 将内存中的数目设置成更小的值, 有利于减少系统的内存占用
type Schema struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 主键的列序号, 一般为时间
	PkCol int32 `protobuf:"varint,1,opt,name=pk_col,json=pkCol,proto3" json:"pk_col,omitempty"`
	// 若干列
	Fields []*Field `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	// 该结构在存储中每块的数目
	MaxRowsPerBlock uint32 `protobuf:"varint,3,opt,name=max_rows_per_block,json=maxRowsPerBlock,proto3" json:"max_rows_per_block,omitempty"`
	// 该结构在内存中保持的数目
	MaxRowsInMemory uint32 `protobuf:"varint,4,opt,name=max_rows_in_memory,json=maxRowsInMemory,proto3" json:"max_rows_in_memory,omitempty"`
	// 更新链
	// 当某个主表更新后, 可能需要更新其他相关的衍生表, 这样的行为即是更新链
	// 合理设置更新链, 有助于减少交互次数, 提高整体性能
	Chains []string `protobuf:"bytes,5,rep,name=chains,proto3" json:"chains,omitempty"`
	// 判重列，在 pk_col 递增的前提下，如果 distinct_col 的值相同，则保留最后一笔
	DistinctCol *int32 `protobuf:"varint,6,opt,name=distinct_col,json=distinctCol,proto3,oneof" json:"distinct_col,omitempty"`
	// 数据的生命周期, 以秒为单位, 为0表示永不过期
	Ttl *uint32 `protobuf:"varint,7,opt,name=ttl,proto3,oneof" json:"ttl,omitempty"`
	// 扩展属性
	Addons map[string]string `protobuf:"bytes,100,rep,name=addons,proto3" json:"addons,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Schema) Reset() {
	*x = Schema{}
	if protoimpl.UnsafeEnabled {
		mi := &file_schema_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schema) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schema) ProtoMessage() {}

func (x *Schema) ProtoReflect() protoreflect.Message {
	mi := &file_schema_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schema.ProtoReflect.Descriptor instead.
func (*Schema) Descriptor() ([]byte, []int) {
	return file_schema_proto_rawDescGZIP(), []int{2}
}

func (x *Schema) GetPkCol() int32 {
	if x != nil {
		return x.PkCol
	}
	return 0
}

func (x *Schema) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Schema) GetMaxRowsPerBlock() uint32 {
	if x != nil {
		return x.MaxRowsPerBlock
	}
	return 0
}

func (x *Schema) GetMaxRowsInMemory() uint32 {
	if x != nil {
		return x.MaxRowsInMemory
	}
	return 0
}

func (x *Schema) GetChains() []string {
	if x != nil {
		return x.Chains
	}
	return nil
}

func (x *Schema) GetDistinctCol() int32 {
	if x != nil && x.DistinctCol != nil {
		return *x.DistinctCol
	}
	return 0
}

func (x *Schema) GetTtl() uint32 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return 0
}

func (x *Schema) GetAddons() map[string]string {
	if x != nil {
		return x.Addons
	}
	return nil
}

var File_schema_proto protoreflect.FileDescriptor

var file_schema_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x1a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x01, 0x0a, 0x08, 0x4f, 0x70, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x09, 0x73, 0x72, 0x63, 0x5f, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x73, 0x72, 0x63, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x73, 0x72, 0x63, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x73, 0x72,
	0x63, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x88, 0x01, 0x01, 0x12, 0x28, 0x0a, 0x0d, 0x74, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x02, 0x52, 0x0c, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x73, 0x72, 0x63, 0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x74, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x5f, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x22, 0xf8, 0x01, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2a, 0x0a, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x72, 0x65, 0x66, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x02, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70,
	0x52, 0x02, 0x6f, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x73, 0x74, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x05, 0x70, 0x61, 0x73, 0x74, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x65, 0x78,
	0x70, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x09, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x4f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x48, 0x01, 0x52, 0x08, 0x6f, 0x70, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x65, 0x78, 0x70, 0x72,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x70, 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0xff,
	0x02, 0x0a, 0x06, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x70, 0x6b, 0x5f,
	0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x70, 0x6b, 0x43, 0x6f, 0x6c,
	0x12, 0x25, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x77, 0x73, 0x50, 0x65, 0x72, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x77, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x77, 0x73, 0x49, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73,
	0x74, 0x69, 0x6e, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48,
	0x00, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x01,
	0x52, 0x03, 0x74, 0x74, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x32, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x6f,
	0x6e, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x1a, 0x39, 0x0a, 0x0b,
	0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x64, 0x69, 0x73, 0x74,
	0x69, 0x6e, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x74, 0x6c,
	0x2a, 0x87, 0x01, 0x0a, 0x07, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4f, 0x70, 0x12, 0x08, 0x0a, 0x04,
	0x53, 0x61, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x61, 0x76, 0x65, 0x46, 0x69,
	0x72, 0x73, 0x74, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x61, 0x78,
	0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x61, 0x76, 0x65, 0x4d, 0x69, 0x6e, 0x10, 0x03, 0x12,
	0x07, 0x0a, 0x03, 0x49, 0x6e, 0x63, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x69, 0x66, 0x66,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x73, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x69, 0x66,
	0x66, 0x46, 0x69, 0x72, 0x73, 0x74, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x10, 0x07, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x76, 0x67, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08,
	0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x10, 0x09, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_schema_proto_rawDescOnce sync.Once
	file_schema_proto_rawDescData = file_schema_proto_rawDesc
)

func file_schema_proto_rawDescGZIP() []byte {
	file_schema_proto_rawDescOnce.Do(func() {
		file_schema_proto_rawDescData = protoimpl.X.CompressGZIP(file_schema_proto_rawDescData)
	})
	return file_schema_proto_rawDescData
}

var file_schema_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_schema_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_schema_proto_goTypes = []interface{}{
	(FieldOp)(0),     // 0: schema.FieldOp
	(*OpParams)(nil), // 1: schema.OpParams
	(*Field)(nil),    // 2: schema.Field
	(*Schema)(nil),   // 3: schema.Schema
	nil,              // 4: schema.Schema.AddonsEntry
	(FieldKind)(0),   // 5: dataframe.FieldKind
}
var file_schema_proto_depIdxs = []int32{
	5, // 0: schema.Field.dtype:type_name -> dataframe.FieldKind
	0, // 1: schema.Field.op:type_name -> schema.FieldOp
	1, // 2: schema.Field.op_params:type_name -> schema.OpParams
	2, // 3: schema.Schema.fields:type_name -> schema.Field
	4, // 4: schema.Schema.addons:type_name -> schema.Schema.AddonsEntry
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_schema_proto_init() }
func file_schema_proto_init() {
	if File_schema_proto != nil {
		return
	}
	file_dataframe_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_schema_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_schema_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schema); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_schema_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_schema_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_schema_proto_msgTypes[2].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_schema_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_schema_proto_goTypes,
		DependencyIndexes: file_schema_proto_depIdxs,
		EnumInfos:         file_schema_proto_enumTypes,
		MessageInfos:      file_schema_proto_msgTypes,
	}.Build()
	File_schema_proto = out.File
	file_schema_proto_rawDesc = nil
	file_schema_proto_goTypes = nil
	file_schema_proto_depIdxs = nil
}
