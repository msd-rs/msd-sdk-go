// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.18.1
// source: msd.proto

package msd

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 更新方式
type UpdateMode int32

const (
	// 按数据结构中定义的方式进行更新, 默认， row 的列及其顺序符合字段定义的 refer 属性
	UpdateMode_Schema UpdateMode = 0
	// 导入更新，一般用于第一次，数据不做处理，直接更新, row 的列数与数据结构中的列一致
	UpdateMode_Import UpdateMode = 1
	// 粘贴上一笔数据，然后更改 pk_col 的值，保持其他的值不变, row 应该只有一列
	UpdateMode_Paste UpdateMode = 2
	// 批量 Schema 更新，忽略请求中的 obj 参数，而是从数据中获取
	UpdateMode_BulkSchema UpdateMode = 3
	// 批量 Import 更新，忽略请求中的 obj 参数，而是从数据中获取
	UpdateMode_BulkImport UpdateMode = 4
	// 来自更新链的更新, 更新链来的数据总是进行按 Schema 更新
	UpdateMode_Chain UpdateMode = 5
	// 数据修改, 数据修改需要指定列
	// 例如对于CSV格式：主键值,1=V1,5=V5 表示修改匹配主键值的记录，列1值为V1，列5值为V5
	UpdateMode_Modify UpdateMode = 6
	// 对数据进行脚本的处理后再进行更新
	UpdateMode_Script UpdateMode = 7
)

// Enum value maps for UpdateMode.
var (
	UpdateMode_name = map[int32]string{
		0: "Schema",
		1: "Import",
		2: "Paste",
		3: "BulkSchema",
		4: "BulkImport",
		5: "Chain",
		6: "Modify",
		7: "Script",
	}
	UpdateMode_value = map[string]int32{
		"Schema":     0,
		"Import":     1,
		"Paste":      2,
		"BulkSchema": 3,
		"BulkImport": 4,
		"Chain":      5,
		"Modify":     6,
		"Script":     7,
	}
)

func (x UpdateMode) Enum() *UpdateMode {
	p := new(UpdateMode)
	*p = x
	return p
}

func (x UpdateMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateMode) Descriptor() protoreflect.EnumDescriptor {
	return file_msd_proto_enumTypes[0].Descriptor()
}

func (UpdateMode) Type() protoreflect.EnumType {
	return &file_msd_proto_enumTypes[0]
}

func (x UpdateMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateMode.Descriptor instead.
func (UpdateMode) EnumDescriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{0}
}

// 待更新数据的格式
type UpdateRowFormat int32

const (
	// CSV 格式，默认 '\n' 分行 ',' 分隔
	UpdateRowFormat_Csv UpdateRowFormat = 0
	// BinaryRows 格式
	UpdateRowFormat_Binary UpdateRowFormat = 1
	// Json Record 格式, 类似 [{column -> value}, ... , {column -> value}] 的数组
	UpdateRowFormat_JsonRecords UpdateRowFormat = 2
	// Json Values 格式, 类似 [ [value1, value2, ...], ... ]
	UpdateRowFormat_JsonValues UpdateRowFormat = 3
)

// Enum value maps for UpdateRowFormat.
var (
	UpdateRowFormat_name = map[int32]string{
		0: "Csv",
		1: "Binary",
		2: "JsonRecords",
		3: "JsonValues",
	}
	UpdateRowFormat_value = map[string]int32{
		"Csv":         0,
		"Binary":      1,
		"JsonRecords": 2,
		"JsonValues":  3,
	}
)

func (x UpdateRowFormat) Enum() *UpdateRowFormat {
	p := new(UpdateRowFormat)
	*p = x
	return p
}

func (x UpdateRowFormat) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateRowFormat) Descriptor() protoreflect.EnumDescriptor {
	return file_msd_proto_enumTypes[1].Descriptor()
}

func (UpdateRowFormat) Type() protoreflect.EnumType {
	return &file_msd_proto_enumTypes[1]
}

func (x UpdateRowFormat) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateRowFormat.Descriptor instead.
func (UpdateRowFormat) EnumDescriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{1}
}

// 过滤器匹配模式
type FilterMode int32

const (
	// 必须全部匹配
	FilterMode_Full FilterMode = 0
	// 部分匹配即可
	FilterMode_Part FilterMode = 1
	// 通配符
	FilterMode_Glob FilterMode = 2
	// 正则表达式
	FilterMode_Regex FilterMode = 3
)

// Enum value maps for FilterMode.
var (
	FilterMode_name = map[int32]string{
		0: "Full",
		1: "Part",
		2: "Glob",
		3: "Regex",
	}
	FilterMode_value = map[string]int32{
		"Full":  0,
		"Part":  1,
		"Glob":  2,
		"Regex": 3,
	}
)

func (x FilterMode) Enum() *FilterMode {
	p := new(FilterMode)
	*p = x
	return p
}

func (x FilterMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FilterMode) Descriptor() protoreflect.EnumDescriptor {
	return file_msd_proto_enumTypes[2].Descriptor()
}

func (FilterMode) Type() protoreflect.EnumType {
	return &file_msd_proto_enumTypes[2]
}

func (x FilterMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FilterMode.Descriptor instead.
func (FilterMode) EnumDescriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{2}
}

type ForwardOp int32

const (
	ForwardOp_StartForward ForwardOp = 0
	ForwardOp_StopForward  ForwardOp = 1
	ForwardOp_ListForwards ForwardOp = 2
)

// Enum value maps for ForwardOp.
var (
	ForwardOp_name = map[int32]string{
		0: "StartForward",
		1: "StopForward",
		2: "ListForwards",
	}
	ForwardOp_value = map[string]int32{
		"StartForward": 0,
		"StopForward":  1,
		"ListForwards": 2,
	}
)

func (x ForwardOp) Enum() *ForwardOp {
	p := new(ForwardOp)
	*p = x
	return p
}

func (x ForwardOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForwardOp) Descriptor() protoreflect.EnumDescriptor {
	return file_msd_proto_enumTypes[3].Descriptor()
}

func (ForwardOp) Type() protoreflect.EnumType {
	return &file_msd_proto_enumTypes[3]
}

func (x ForwardOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ForwardOp.Descriptor instead.
func (ForwardOp) EnumDescriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{3}
}

// 获取数据请求参数
type GetParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 标的名
	Obj string `protobuf:"bytes,1,opt,name=obj,proto3" json:"obj,omitempty"`
	// 表名，对应 schema 名
	Dkind string `protobuf:"bytes,2,opt,name=dkind,proto3" json:"dkind,omitempty"`
	// 字段列表
	Fields []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	// 开始时间
	StartDate string `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// 结束时间
	EndDate string `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// 偏移值
	//
	// - 如果 ascending 为 true，则是时间最小的数据的偏移
	// - 如果 ascending 为 false，则是时间最大的数据的偏移
	Offest int32 `protobuf:"varint,6,opt,name=offest,proto3" json:"offest,omitempty"`
	// 最多获取的数目
	Limit int32 `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`
	// 按时间取数方向
	Ascending bool `protobuf:"varint,8,opt,name=ascending,proto3" json:"ascending,omitempty"`
	// 对元数据查询，可以在in参数指定一系列主键
	Ids []string `protobuf:"bytes,9,rep,name=ids,proto3" json:"ids,omitempty"`
	// 元数据的键值名称
	Idname string `protobuf:"bytes,10,opt,name=idname,proto3" json:"idname,omitempty"`
	// 额外的过滤条件， 从SQL解析而来
	AddtionalWhereAst string `protobuf:"bytes,11,opt,name=addtional_where_ast,json=addtionalWhereAst,proto3" json:"addtional_where_ast,omitempty"`
}

func (x *GetParams) Reset() {
	*x = GetParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msd_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetParams) ProtoMessage() {}

func (x *GetParams) ProtoReflect() protoreflect.Message {
	mi := &file_msd_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetParams.ProtoReflect.Descriptor instead.
func (*GetParams) Descriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{0}
}

func (x *GetParams) GetObj() string {
	if x != nil {
		return x.Obj
	}
	return ""
}

func (x *GetParams) GetDkind() string {
	if x != nil {
		return x.Dkind
	}
	return ""
}

func (x *GetParams) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *GetParams) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GetParams) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *GetParams) GetOffest() int32 {
	if x != nil {
		return x.Offest
	}
	return 0
}

func (x *GetParams) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *GetParams) GetAscending() bool {
	if x != nil {
		return x.Ascending
	}
	return false
}

func (x *GetParams) GetIds() []string {
	if x != nil {
		return x.Ids
	}
	return nil
}

func (x *GetParams) GetIdname() string {
	if x != nil {
		return x.Idname
	}
	return ""
}

func (x *GetParams) GetAddtionalWhereAst() string {
	if x != nil {
		return x.AddtionalWhereAst
	}
	return ""
}

// 获取数据请求
type GetDataFrameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 请求的参数
	Params *GetParams `protobuf:"bytes,1,opt,name=params,proto3" json:"params,omitempty"`
	// 请求参数的SQL表示，系统会优先使用 SQL，如果SQL为空，则使用 params
	Sql string `protobuf:"bytes,2,opt,name=sql,proto3" json:"sql,omitempty"`
	// 其他的扩展请求参数
	Addons map[string]string `protobuf:"bytes,100,rep,name=addons,proto3" json:"addons,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetDataFrameRequest) Reset() {
	*x = GetDataFrameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msd_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataFrameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataFrameRequest) ProtoMessage() {}

func (x *GetDataFrameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_msd_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataFrameRequest.ProtoReflect.Descriptor instead.
func (*GetDataFrameRequest) Descriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{1}
}

func (x *GetDataFrameRequest) GetParams() *GetParams {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *GetDataFrameRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *GetDataFrameRequest) GetAddons() map[string]string {
	if x != nil {
		return x.Addons
	}
	return nil
}

// 获取数据的返回
type GetDataFrameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 返回码的代表的消息
	Messge string `protobuf:"bytes,2,opt,name=messge,proto3" json:"messge,omitempty"`
	// 返回的值
	Values *DataFrame `protobuf:"bytes,3,opt,name=values,proto3" json:"values,omitempty"`
	// 返回的额外信息
	Addons map[string]string `protobuf:"bytes,100,rep,name=addons,proto3" json:"addons,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetDataFrameResponse) Reset() {
	*x = GetDataFrameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msd_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataFrameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataFrameResponse) ProtoMessage() {}

func (x *GetDataFrameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_msd_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataFrameResponse.ProtoReflect.Descriptor instead.
func (*GetDataFrameResponse) Descriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{2}
}

func (x *GetDataFrameResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetDataFrameResponse) GetMessge() string {
	if x != nil {
		return x.Messge
	}
	return ""
}

func (x *GetDataFrameResponse) GetValues() *DataFrame {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *GetDataFrameResponse) GetAddons() map[string]string {
	if x != nil {
		return x.Addons
	}
	return nil
}

// 更新内容为 Binary 时数据头
type UpdateRowBinary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 行数, 列数由 format 解析
	Rows int32 `protobuf:"varint,1,opt,name=rows,proto3" json:"rows,omitempty"`
	// 类似 python pack 的 format， 但只支持有限的类型, q(i64) d(f64) s(字符串), 额外的 e 表示 D64
	Format string `protobuf:"bytes,2,opt,name=format,proto3" json:"format,omitempty"`
	// 实际的数据
	Data []byte `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *UpdateRowBinary) Reset() {
	*x = UpdateRowBinary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msd_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRowBinary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRowBinary) ProtoMessage() {}

func (x *UpdateRowBinary) ProtoReflect() protoreflect.Message {
	mi := &file_msd_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRowBinary.ProtoReflect.Descriptor instead.
func (*UpdateRowBinary) Descriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateRowBinary) GetRows() int32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *UpdateRowBinary) GetFormat() string {
	if x != nil {
		return x.Format
	}
	return ""
}

func (x *UpdateRowBinary) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

// CSV 格式的相关配置
// 通过CSV的配置，目的是尽可能减少数据产生方对数据的额外转换，因为在很多场景下，数据产生方无法定制，为了接收其数据，
// 需要一个额外的数据转换适配，通过本参数的配置，将会尽量去识别原始的数据，提升性能。
type CsvOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// csv 的分割符，按4字节使用，从低到高依次为
	// 0 : 列分隔符 1: 行分割符 2: 强制使用该字段，非强制状态下，行列的0值表示默认(\n 和,)
	// 例如
	// 0x0000007C 表示用 |(0x7c) 分隔列，但仍用 \n(0x0a) 分割行
	// 0x0001002C 表示用 ,(0x2c) 分隔列，但用 \x00 分割行, 某些C系统会产生此类格式
	CsvSep int32 `protobuf:"varint,1,opt,name=csv_sep,json=csvSep,proto3" json:"csv_sep,omitempty"`
	// 忽略前 n 行，一般对于带有 title 行的，应该设置为 1
	SkipHeadN int32 `protobuf:"varint,2,opt,name=skip_head_n,json=skipHeadN,proto3" json:"skip_head_n,omitempty"`
	// 忽略后 n 行
	SkipTailN int32 `protobuf:"varint,3,opt,name=skip_tail_n,json=skipTailN,proto3" json:"skip_tail_n,omitempty"`
	// 忽略带有给定前缀的行
	SkipPrefies []string `protobuf:"bytes,4,rep,name=skip_prefies,json=skipPrefies,proto3" json:"skip_prefies,omitempty"`
	// 额外的 csv 格式行分割符, 包括 csv_sep 里及该字段的任意字符均会作为分隔符
	CsvAdditationRowSep []byte `protobuf:"bytes,5,opt,name=csv_additation_row_sep,json=csvAdditationRowSep,proto3" json:"csv_additation_row_sep,omitempty"`
	// 如果 csv 是特别对齐过（每列通过空格补充宽度），可以以此来指出每列的偏移，以优化性能，该列有值表示CSV是对齐的
	CsvFixedColOffset []int32 `protobuf:"varint,6,rep,packed,name=csv_fixed_col_offset,json=csvFixedColOffset,proto3" json:"csv_fixed_col_offset,omitempty"`
	// csv 的字段映射, 默认的情况下，csv 的列与 schema的列 一一对映，可以在此字段中指出 csv 列对映的 schema 列，如果指定了该值，未在 csv_col_mapping 的列将被忽略
	CsvColMapping []int32 `protobuf:"varint,7,rep,packed,name=csv_col_mapping,json=csvColMapping,proto3" json:"csv_col_mapping,omitempty"`
	// 对于某些CSV，可能每行会有不同的字段映射，可以用此字段指出，格式为 {前缀: 逗号分割的数字}
	CsvColMappingByPrefix map[string]string `protobuf:"bytes,8,rep,name=csv_col_mapping_by_prefix,json=csvColMappingByPrefix,proto3" json:"csv_col_mapping_by_prefix,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 设置CSV中的 obj 列序号，对于 BulkSchema 和 BulkImport 更新，需要设置此值以指定如何识别 obj 字段，默认为第一列
	// 例如对于一笔报价数据
	// - 按 Schema 更新，需要提供 时间，价格，成交量，同时 UdpateDataFrameRequest.obj 设置为 代码
	// - 按 BulkSchema 更新，需要提供 代码，时间，价格，成交量，并设置 obj_col 为 0
	ObjCol int32 `protobuf:"varint,9,opt,name=obj_col,json=objCol,proto3" json:"obj_col,omitempty"`
}

func (x *CsvOption) Reset() {
	*x = CsvOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msd_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CsvOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsvOption) ProtoMessage() {}

func (x *CsvOption) ProtoReflect() protoreflect.Message {
	mi := &file_msd_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsvOption.ProtoReflect.Descriptor instead.
func (*CsvOption) Descriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{4}
}

func (x *CsvOption) GetCsvSep() int32 {
	if x != nil {
		return x.CsvSep
	}
	return 0
}

func (x *CsvOption) GetSkipHeadN() int32 {
	if x != nil {
		return x.SkipHeadN
	}
	return 0
}

func (x *CsvOption) GetSkipTailN() int32 {
	if x != nil {
		return x.SkipTailN
	}
	return 0
}

func (x *CsvOption) GetSkipPrefies() []string {
	if x != nil {
		return x.SkipPrefies
	}
	return nil
}

func (x *CsvOption) GetCsvAdditationRowSep() []byte {
	if x != nil {
		return x.CsvAdditationRowSep
	}
	return nil
}

func (x *CsvOption) GetCsvFixedColOffset() []int32 {
	if x != nil {
		return x.CsvFixedColOffset
	}
	return nil
}

func (x *CsvOption) GetCsvColMapping() []int32 {
	if x != nil {
		return x.CsvColMapping
	}
	return nil
}

func (x *CsvOption) GetCsvColMappingByPrefix() map[string]string {
	if x != nil {
		return x.CsvColMappingByPrefix
	}
	return nil
}

func (x *CsvOption) GetObjCol() int32 {
	if x != nil {
		return x.ObjCol
	}
	return 0
}

// 以Script模式更新时，script的相关属性
type ScriptOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// script 的名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *ScriptOption) Reset() {
	*x = ScriptOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msd_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScriptOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScriptOption) ProtoMessage() {}

func (x *ScriptOption) ProtoReflect() protoreflect.Message {
	mi := &file_msd_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScriptOption.ProtoReflect.Descriptor instead.
func (*ScriptOption) Descriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{5}
}

func (x *ScriptOption) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// 待更新数据的配置选项
type UpdateRowOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 数据的格式
	Format UpdateRowFormat `protobuf:"varint,1,opt,name=format,proto3,enum=msd.UpdateRowFormat" json:"format,omitempty"`
	// 如果数据格式是 CSV 格式，可以指定一些 CSV的选项
	Csv *CsvOption `protobuf:"bytes,2,opt,name=csv,proto3" json:"csv,omitempty"`
	// 如果更新模式是 Script，指明 script 的属性
	Script *ScriptOption `protobuf:"bytes,3,opt,name=script,proto3" json:"script,omitempty"`
}

func (x *UpdateRowOption) Reset() {
	*x = UpdateRowOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msd_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRowOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRowOption) ProtoMessage() {}

func (x *UpdateRowOption) ProtoReflect() protoreflect.Message {
	mi := &file_msd_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRowOption.ProtoReflect.Descriptor instead.
func (*UpdateRowOption) Descriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateRowOption) GetFormat() UpdateRowFormat {
	if x != nil {
		return x.Format
	}
	return UpdateRowFormat_Csv
}

func (x *UpdateRowOption) GetCsv() *CsvOption {
	if x != nil {
		return x.Csv
	}
	return nil
}

func (x *UpdateRowOption) GetScript() *ScriptOption {
	if x != nil {
		return x.Script
	}
	return nil
}

// 更新请求的请求参数
type UpdateDataFrameRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 对象标识, 对于 BulkSchema 和 BulkImport 忽略，而是从 rows 中读取
	Obj string `protobuf:"bytes,1,opt,name=obj,proto3" json:"obj,omitempty"`
	// 数据类型
	Dkind string `protobuf:"bytes,2,opt,name=dkind,proto3" json:"dkind,omitempty"`
	// 待更新的行，需要根据 dkind 对应的数据的 pkcol 升序排序, 否则更新会出错
	Rows []byte `protobuf:"bytes,3,opt,name=rows,proto3" json:"rows,omitempty"`
	// 更新方式
	Mode UpdateMode `protobuf:"varint,4,opt,name=mode,proto3,enum=msd.UpdateMode" json:"mode,omitempty"`
	// 更新行的配置
	RowsOption *UpdateRowOption `protobuf:"bytes,5,opt,name=rowsOption,proto3" json:"rowsOption,omitempty"`
	// 更新来源 默认无需设置，对于 fowrd 和 chain 可设置来源
	Source *string `protobuf:"bytes,6,opt,name=source,proto3,oneof" json:"source,omitempty"`
}

func (x *UpdateDataFrameRequest) Reset() {
	*x = UpdateDataFrameRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msd_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDataFrameRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDataFrameRequest) ProtoMessage() {}

func (x *UpdateDataFrameRequest) ProtoReflect() protoreflect.Message {
	mi := &file_msd_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDataFrameRequest.ProtoReflect.Descriptor instead.
func (*UpdateDataFrameRequest) Descriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{7}
}

func (x *UpdateDataFrameRequest) GetObj() string {
	if x != nil {
		return x.Obj
	}
	return ""
}

func (x *UpdateDataFrameRequest) GetDkind() string {
	if x != nil {
		return x.Dkind
	}
	return ""
}

func (x *UpdateDataFrameRequest) GetRows() []byte {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *UpdateDataFrameRequest) GetMode() UpdateMode {
	if x != nil {
		return x.Mode
	}
	return UpdateMode_Schema
}

func (x *UpdateDataFrameRequest) GetRowsOption() *UpdateRowOption {
	if x != nil {
		return x.RowsOption
	}
	return nil
}

func (x *UpdateDataFrameRequest) GetSource() string {
	if x != nil && x.Source != nil {
		return *x.Source
	}
	return ""
}

// 更新请求的返回
type UpdateDataFrameResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 返回码代表的信息
	Messge string `protobuf:"bytes,2,opt,name=messge,proto3" json:"messge,omitempty"`
	// 更新的行数
	UpdatedRows int32 `protobuf:"varint,3,opt,name=updated_rows,json=updatedRows,proto3" json:"updated_rows,omitempty"`
}

func (x *UpdateDataFrameResponse) Reset() {
	*x = UpdateDataFrameResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msd_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateDataFrameResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDataFrameResponse) ProtoMessage() {}

func (x *UpdateDataFrameResponse) ProtoReflect() protoreflect.Message {
	mi := &file_msd_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDataFrameResponse.ProtoReflect.Descriptor instead.
func (*UpdateDataFrameResponse) Descriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateDataFrameResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateDataFrameResponse) GetMessge() string {
	if x != nil {
		return x.Messge
	}
	return ""
}

func (x *UpdateDataFrameResponse) GetUpdatedRows() int32 {
	if x != nil {
		return x.UpdatedRows
	}
	return 0
}

// 元数据的更新请求
type UpdateMetaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 对于 json 是数组的场景, 指明每一项数据的id键名
	// 对于 json 是对象的场景, 如果是单条记录, 指明id键名, 如果是多条记录, 设置该值为空
	// 对于 jsonb 场景，为其键值
	Idkey string `protobuf:"bytes,1,opt,name=idkey,proto3" json:"idkey,omitempty"`
	// 元数据存储的表名
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	// 待更新的元数据, JSON 格式
	// 可以是 数组或对象
	Json string `protobuf:"bytes,3,opt,name=json,proto3" json:"json,omitempty"`
	// 待更新的元数据，JSOB 格式，当JSONB有值时，优先使用JSONB
	// JSONB总是为单条数据
	Jsonb []byte `protobuf:"bytes,4,opt,name=jsonb,proto3" json:"jsonb,omitempty"`
	// 可选的值键，如果有该值，以该值为键，取 json ，否则当成所有
	ValueKey *string `protobuf:"bytes,5,opt,name=value_key,json=valueKey,proto3,oneof" json:"value_key,omitempty"`
}

func (x *UpdateMetaRequest) Reset() {
	*x = UpdateMetaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msd_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMetaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMetaRequest) ProtoMessage() {}

func (x *UpdateMetaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_msd_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMetaRequest.ProtoReflect.Descriptor instead.
func (*UpdateMetaRequest) Descriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{9}
}

func (x *UpdateMetaRequest) GetIdkey() string {
	if x != nil {
		return x.Idkey
	}
	return ""
}

func (x *UpdateMetaRequest) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *UpdateMetaRequest) GetJson() string {
	if x != nil {
		return x.Json
	}
	return ""
}

func (x *UpdateMetaRequest) GetJsonb() []byte {
	if x != nil {
		return x.Jsonb
	}
	return nil
}

func (x *UpdateMetaRequest) GetValueKey() string {
	if x != nil && x.ValueKey != nil {
		return *x.ValueKey
	}
	return ""
}

// 元数据更新请求的返回
type UpdateMetaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 返回码代表的信息
	Messge string `protobuf:"bytes,2,opt,name=messge,proto3" json:"messge,omitempty"`
}

func (x *UpdateMetaResponse) Reset() {
	*x = UpdateMetaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msd_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateMetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMetaResponse) ProtoMessage() {}

func (x *UpdateMetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_msd_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMetaResponse.ProtoReflect.Descriptor instead.
func (*UpdateMetaResponse) Descriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{10}
}

func (x *UpdateMetaResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateMetaResponse) GetMessge() string {
	if x != nil {
		return x.Messge
	}
	return ""
}

// 过滤器
type Filter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    string     `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword,omitempty"`
	Mode       FilterMode `protobuf:"varint,2,opt,name=mode,proto3,enum=msd.FilterMode" json:"mode,omitempty"`
	IgnoreCase bool       `protobuf:"varint,3,opt,name=ignoreCase,proto3" json:"ignoreCase,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msd_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Filter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filter) ProtoMessage() {}

func (x *Filter) ProtoReflect() protoreflect.Message {
	mi := &file_msd_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filter.ProtoReflect.Descriptor instead.
func (*Filter) Descriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{11}
}

func (x *Filter) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *Filter) GetMode() FilterMode {
	if x != nil {
		return x.Mode
	}
	return FilterMode_Full
}

func (x *Filter) GetIgnoreCase() bool {
	if x != nil {
		return x.IgnoreCase
	}
	return false
}

// 获取表信息请求
type GetTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 表名的匹配过滤器
	NameFilter *Filter `protobuf:"bytes,1,opt,name=nameFilter,proto3" json:"nameFilter,omitempty"`
}

func (x *GetTableRequest) Reset() {
	*x = GetTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msd_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableRequest) ProtoMessage() {}

func (x *GetTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_msd_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableRequest.ProtoReflect.Descriptor instead.
func (*GetTableRequest) Descriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{12}
}

func (x *GetTableRequest) GetNameFilter() *Filter {
	if x != nil {
		return x.NameFilter
	}
	return nil
}

// 获取表信息响应
type GetTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 返回码代表的信息
	Messge string `protobuf:"bytes,2,opt,name=messge,proto3" json:"messge,omitempty"`
	// 表信息
	Schemas map[string]*Schema `protobuf:"bytes,3,rep,name=schemas,proto3" json:"schemas,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetTableResponse) Reset() {
	*x = GetTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msd_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTableResponse) ProtoMessage() {}

func (x *GetTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_msd_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTableResponse.ProtoReflect.Descriptor instead.
func (*GetTableResponse) Descriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{13}
}

func (x *GetTableResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *GetTableResponse) GetMessge() string {
	if x != nil {
		return x.Messge
	}
	return ""
}

func (x *GetTableResponse) GetSchemas() map[string]*Schema {
	if x != nil {
		return x.Schemas
	}
	return nil
}

type ListObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 表名，对应 schema 名
	Dkind string `protobuf:"bytes,1,opt,name=dkind,proto3" json:"dkind,omitempty"`
	// 标的名的匹配过滤器
	ObjFilter *Filter `protobuf:"bytes,2,opt,name=objFilter,proto3" json:"objFilter,omitempty"`
	// 额外的查询, 其中的 __OBJ__ 会被替换成标的，进行查询
	Sql *string `protobuf:"bytes,3,opt,name=sql,proto3,oneof" json:"sql,omitempty"`
}

func (x *ListObjectRequest) Reset() {
	*x = ListObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msd_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListObjectRequest) ProtoMessage() {}

func (x *ListObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_msd_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListObjectRequest.ProtoReflect.Descriptor instead.
func (*ListObjectRequest) Descriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{14}
}

func (x *ListObjectRequest) GetDkind() string {
	if x != nil {
		return x.Dkind
	}
	return ""
}

func (x *ListObjectRequest) GetObjFilter() *Filter {
	if x != nil {
		return x.ObjFilter
	}
	return nil
}

func (x *ListObjectRequest) GetSql() string {
	if x != nil && x.Sql != nil {
		return *x.Sql
	}
	return ""
}

type ListObjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 返回码代表的信息
	Messge string `protobuf:"bytes,2,opt,name=messge,proto3" json:"messge,omitempty"`
	// 查询到的标的相关的信息
	Objects map[string]*DataFrameIndex `protobuf:"bytes,3,rep,name=objects,proto3" json:"objects,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 额外的查询返回的结果集
	Records map[string]*DataFrame `protobuf:"bytes,4,rep,name=records,proto3" json:"records,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ListObjectResponse) Reset() {
	*x = ListObjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msd_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListObjectResponse) ProtoMessage() {}

func (x *ListObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_msd_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListObjectResponse.ProtoReflect.Descriptor instead.
func (*ListObjectResponse) Descriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{15}
}

func (x *ListObjectResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ListObjectResponse) GetMessge() string {
	if x != nil {
		return x.Messge
	}
	return ""
}

func (x *ListObjectResponse) GetObjects() map[string]*DataFrameIndex {
	if x != nil {
		return x.Objects
	}
	return nil
}

func (x *ListObjectResponse) GetRecords() map[string]*DataFrame {
	if x != nil {
		return x.Records
	}
	return nil
}

type BinlogRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ts int64 `protobuf:"varint,1,opt,name=ts,proto3" json:"ts,omitempty"`
	// Types that are assignable to AnyRequest:
	//	*BinlogRecord_Meta
	//	*BinlogRecord_DataFrame
	AnyRequest isBinlogRecord_AnyRequest `protobuf_oneof:"anyRequest"`
}

func (x *BinlogRecord) Reset() {
	*x = BinlogRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msd_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BinlogRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BinlogRecord) ProtoMessage() {}

func (x *BinlogRecord) ProtoReflect() protoreflect.Message {
	mi := &file_msd_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BinlogRecord.ProtoReflect.Descriptor instead.
func (*BinlogRecord) Descriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{16}
}

func (x *BinlogRecord) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (m *BinlogRecord) GetAnyRequest() isBinlogRecord_AnyRequest {
	if m != nil {
		return m.AnyRequest
	}
	return nil
}

func (x *BinlogRecord) GetMeta() *UpdateMetaRequest {
	if x, ok := x.GetAnyRequest().(*BinlogRecord_Meta); ok {
		return x.Meta
	}
	return nil
}

func (x *BinlogRecord) GetDataFrame() *UpdateDataFrameRequest {
	if x, ok := x.GetAnyRequest().(*BinlogRecord_DataFrame); ok {
		return x.DataFrame
	}
	return nil
}

type isBinlogRecord_AnyRequest interface {
	isBinlogRecord_AnyRequest()
}

type BinlogRecord_Meta struct {
	Meta *UpdateMetaRequest `protobuf:"bytes,5,opt,name=Meta,proto3,oneof"`
}

type BinlogRecord_DataFrame struct {
	DataFrame *UpdateDataFrameRequest `protobuf:"bytes,6,opt,name=DataFrame,proto3,oneof"`
}

func (*BinlogRecord_Meta) isBinlogRecord_AnyRequest() {}

func (*BinlogRecord_DataFrame) isBinlogRecord_AnyRequest() {}

type ForwardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 操作类型
	Operation ForwardOp `protobuf:"varint,1,opt,name=operation,proto3,enum=msd.ForwardOp" json:"operation,omitempty"`
	// 转发目标URL
	Target string `protobuf:"bytes,2,opt,name=target,proto3" json:"target,omitempty"`
	// 启动转发时可以设置的转发开始时间点
	StartDate *string `protobuf:"bytes,3,opt,name=startDate,proto3,oneof" json:"startDate,omitempty"`
}

func (x *ForwardRequest) Reset() {
	*x = ForwardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msd_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardRequest) ProtoMessage() {}

func (x *ForwardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_msd_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardRequest.ProtoReflect.Descriptor instead.
func (*ForwardRequest) Descriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{17}
}

func (x *ForwardRequest) GetOperation() ForwardOp {
	if x != nil {
		return x.Operation
	}
	return ForwardOp_StartForward
}

func (x *ForwardRequest) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

func (x *ForwardRequest) GetStartDate() string {
	if x != nil && x.StartDate != nil {
		return *x.StartDate
	}
	return ""
}

type ForwardDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastTs int64 `protobuf:"varint,1,opt,name=lastTs,proto3" json:"lastTs,omitempty"`
}

func (x *ForwardDetail) Reset() {
	*x = ForwardDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msd_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardDetail) ProtoMessage() {}

func (x *ForwardDetail) ProtoReflect() protoreflect.Message {
	mi := &file_msd_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardDetail.ProtoReflect.Descriptor instead.
func (*ForwardDetail) Descriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{18}
}

func (x *ForwardDetail) GetLastTs() int64 {
	if x != nil {
		return x.LastTs
	}
	return 0
}

type ForwardResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 返回码的代表的消息
	Messge string `protobuf:"bytes,2,opt,name=messge,proto3" json:"messge,omitempty"`
	// 对于 ListForwards, 返回当前的转发详情
	Forwards map[string]*ForwardDetail `protobuf:"bytes,10,rep,name=forwards,proto3" json:"forwards,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ForwardResponse) Reset() {
	*x = ForwardResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msd_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardResponse) ProtoMessage() {}

func (x *ForwardResponse) ProtoReflect() protoreflect.Message {
	mi := &file_msd_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardResponse.ProtoReflect.Descriptor instead.
func (*ForwardResponse) Descriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{19}
}

func (x *ForwardResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ForwardResponse) GetMessge() string {
	if x != nil {
		return x.Messge
	}
	return ""
}

func (x *ForwardResponse) GetForwards() map[string]*ForwardDetail {
	if x != nil {
		return x.Forwards
	}
	return nil
}

// Sql 查询的请求
type SqlRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 待执行的SQL
	Sql string `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	// 可选的 qid，将原样返回
	Qid *string `protobuf:"bytes,2,opt,name=qid,proto3,oneof" json:"qid,omitempty"`
}

func (x *SqlRequest) Reset() {
	*x = SqlRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msd_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlRequest) ProtoMessage() {}

func (x *SqlRequest) ProtoReflect() protoreflect.Message {
	mi := &file_msd_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlRequest.ProtoReflect.Descriptor instead.
func (*SqlRequest) Descriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{20}
}

func (x *SqlRequest) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *SqlRequest) GetQid() string {
	if x != nil && x.Qid != nil {
		return *x.Qid
	}
	return ""
}

// Sql 查询的回复
type SqlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 返回码
	Code int32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	// 返回码的代表的消息
	Messge string `protobuf:"bytes,2,opt,name=messge,proto3" json:"messge,omitempty"`
	// 可选的 qid，将原样返回
	Qid *string `protobuf:"bytes,3,opt,name=qid,proto3,oneof" json:"qid,omitempty"`
	// 相关的行数
	Rows int32 `protobuf:"varint,4,opt,name=rows,proto3" json:"rows,omitempty"`
	// 返回的数据
	Values *DataFrame `protobuf:"bytes,5,opt,name=values,proto3" json:"values,omitempty"`
	// 返回的额外信息
	Addons map[string]string `protobuf:"bytes,100,rep,name=addons,proto3" json:"addons,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *SqlResponse) Reset() {
	*x = SqlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_msd_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlResponse) ProtoMessage() {}

func (x *SqlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_msd_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlResponse.ProtoReflect.Descriptor instead.
func (*SqlResponse) Descriptor() ([]byte, []int) {
	return file_msd_proto_rawDescGZIP(), []int{21}
}

func (x *SqlResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *SqlResponse) GetMessge() string {
	if x != nil {
		return x.Messge
	}
	return ""
}

func (x *SqlResponse) GetQid() string {
	if x != nil && x.Qid != nil {
		return *x.Qid
	}
	return ""
}

func (x *SqlResponse) GetRows() int32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

func (x *SqlResponse) GetValues() *DataFrame {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *SqlResponse) GetAddons() map[string]string {
	if x != nil {
		return x.Addons
	}
	return nil
}

var File_msd_proto protoreflect.FileDescriptor

var file_msd_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6d, 0x73, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6d, 0x73, 0x64,
	0x1a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0c, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xab, 0x02, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x6f, 0x62, 0x6a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x62, 0x6a, 0x12,
	0x14, 0x0a, 0x05, 0x64, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x64, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x65, 0x73,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x73, 0x63, 0x65, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x03, 0x69, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x61, 0x64, 0x64, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x5f, 0x61, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x64, 0x64, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x57, 0x68, 0x65, 0x72, 0x65, 0x41, 0x73, 0x74, 0x22, 0xc8, 0x01,
	0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x73, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x10, 0x0a,
	0x03, 0x73, 0x71, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x12,
	0x3c, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x1a, 0x39, 0x0a,
	0x0b, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xea, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x73, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x73, 0x67, 0x65, 0x12, 0x2c, 0x0a,
	0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x3d, 0x0a, 0x06, 0x61,
	0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x64, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x6d, 0x73,
	0x64, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x51, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x77, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xdd, 0x03, 0x0a, 0x09, 0x43, 0x73, 0x76,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x73, 0x76, 0x5f, 0x73, 0x65,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x73, 0x76, 0x53, 0x65, 0x70, 0x12,
	0x1e, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x48, 0x65, 0x61, 0x64, 0x4e, 0x12,
	0x1e, 0x0a, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x54, 0x61, 0x69, 0x6c, 0x4e, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6b, 0x69, 0x70, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x16, 0x63, 0x73, 0x76, 0x5f, 0x61, 0x64, 0x64, 0x69, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x13, 0x63, 0x73, 0x76, 0x41, 0x64, 0x64, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x6f, 0x77, 0x53, 0x65, 0x70, 0x12, 0x2f, 0x0a, 0x14, 0x63, 0x73, 0x76, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x11, 0x63, 0x73, 0x76, 0x46, 0x69, 0x78, 0x65, 0x64, 0x43,
	0x6f, 0x6c, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x63, 0x73, 0x76, 0x5f,
	0x63, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x0d, 0x63, 0x73, 0x76, 0x43, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67,
	0x12, 0x63, 0x0a, 0x19, 0x63, 0x73, 0x76, 0x5f, 0x63, 0x6f, 0x6c, 0x5f, 0x6d, 0x61, 0x70, 0x70,
	0x69, 0x6e, 0x67, 0x5f, 0x62, 0x79, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x43, 0x73, 0x76, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x73, 0x76, 0x43, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x42, 0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x15,
	0x63, 0x73, 0x76, 0x43, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x79, 0x50,
	0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x17, 0x0a, 0x07, 0x6f, 0x62, 0x6a, 0x5f, 0x63, 0x6f, 0x6c,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x43, 0x6f, 0x6c, 0x1a, 0x48,
	0x0a, 0x1a, 0x43, 0x73, 0x76, 0x43, 0x6f, 0x6c, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42,
	0x79, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x22, 0x0a, 0x0c, 0x53, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x8c, 0x01, 0x0a,
	0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x14, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77,
	0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x20,
	0x0a, 0x03, 0x63, 0x73, 0x76, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6d, 0x73,
	0x64, 0x2e, 0x43, 0x73, 0x76, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x63, 0x73, 0x76,
	0x12, 0x29, 0x0a, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x06, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0xd7, 0x01, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x62, 0x6a, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x62, 0x6a, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x72, 0x6f,
	0x77, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0f, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x34, 0x0a, 0x0a, 0x72, 0x6f, 0x77, 0x73, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6d, 0x73,
	0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x0a, 0x72, 0x6f, 0x77, 0x73, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x68, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x73, 0x67, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x73, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x52, 0x6f, 0x77, 0x73, 0x22,
	0x99, 0x01, 0x0a, 0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x64, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x64, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6a, 0x73, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x12, 0x20, 0x0a, 0x09, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x08, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4b, 0x65, 0x79, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x22, 0x40, 0x0a, 0x12, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x73, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x73, 0x67, 0x65, 0x22, 0x67, 0x0a,
	0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x23, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x0f, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x43, 0x61, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x43, 0x61, 0x73, 0x65, 0x22, 0x3e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x0a, 0x6e, 0x61, 0x6d,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e,
	0x6d, 0x73, 0x64, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x22, 0xc8, 0x01, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x73, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x65, 0x73, 0x73, 0x67, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x73, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x73, 0x1a, 0x4a, 0x0a, 0x0c, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x2e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x22, 0x73, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x64, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x29, 0x0a, 0x09,
	0x6f, 0x62, 0x6a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0b, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x09, 0x6f, 0x62,
	0x6a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x15, 0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x73, 0x71, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x06,
	0x0a, 0x04, 0x5f, 0x73, 0x71, 0x6c, 0x22, 0xe9, 0x02, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x73, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x73, 0x67, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x73, 0x64,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x07, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6d, 0x73, 0x64,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x1a, 0x55, 0x0a, 0x0c, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x50, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x97, 0x01, 0x0a, 0x0c, 0x42, 0x69, 0x6e, 0x6c, 0x6f, 0x67, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x04, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x4d, 0x65, 0x74,
	0x61, 0x12, 0x3b, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x09, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x42, 0x0c,
	0x0a, 0x0a, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x87, 0x01, 0x0a,
	0x0e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2c, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x4f, 0x70, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x21, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x22, 0x27, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x54,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6c, 0x61, 0x73, 0x74, 0x54, 0x73, 0x22,
	0xce, 0x01, 0x0a, 0x0f, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x73, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x73, 0x67, 0x65, 0x12,
	0x3e, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x1a,
	0x4f, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x3d, 0x0a, 0x0a, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10,
	0x0a, 0x03, 0x73, 0x71, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x73, 0x71, 0x6c,
	0x12, 0x15, 0x0a, 0x03, 0x71, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x03, 0x71, 0x69, 0x64, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x71, 0x69, 0x64, 0x22,
	0x8b, 0x02, 0x0a, 0x0b, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x73, 0x73, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x73, 0x73, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x03, 0x71,
	0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x71, 0x69, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61,
	0x6d, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x18, 0x64,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x06, 0x61, 0x64, 0x64, 0x6f, 0x6e, 0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x41, 0x64,
	0x64, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x71, 0x69, 0x64, 0x2a, 0x72, 0x0a,
	0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x61, 0x73, 0x74, 0x65, 0x10, 0x02, 0x12, 0x0e,
	0x0a, 0x0a, 0x42, 0x75, 0x6c, 0x6b, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x10, 0x03, 0x12, 0x0e,
	0x0a, 0x0a, 0x42, 0x75, 0x6c, 0x6b, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x10, 0x04, 0x12, 0x09,
	0x0a, 0x05, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x10,
	0x07, 0x2a, 0x47, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x77, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x73, 0x76, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4a, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x73, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x4a, 0x73,
	0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x10, 0x03, 0x2a, 0x35, 0x0a, 0x0a, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x75, 0x6c, 0x6c,
	0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x61, 0x72, 0x74, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x47, 0x6c, 0x6f, 0x62, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x52, 0x65, 0x67, 0x65, 0x78, 0x10,
	0x03, 0x2a, 0x40, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x4f, 0x70, 0x12, 0x10,
	0x0a, 0x0c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x70, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x10,
	0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x73, 0x10, 0x02, 0x32, 0xb4, 0x03, 0x0a, 0x05, 0x41, 0x70, 0x69, 0x56, 0x31, 0x12, 0x3c, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x18, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19,
	0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0a, 0x4c,
	0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x2e, 0x6d, 0x73, 0x64, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x47, 0x0a, 0x06,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x28, 0x01, 0x12, 0x39, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x14, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x3f, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x16,
	0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x36, 0x0a, 0x07, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x13, 0x2e, 0x6d,
	0x73, 0x64, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x14, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2f, 0x0a, 0x08, 0x53, 0x71, 0x6c,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x0f, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x53, 0x71, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x6d, 0x73, 0x64, 0x2e, 0x53, 0x71, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_msd_proto_rawDescOnce sync.Once
	file_msd_proto_rawDescData = file_msd_proto_rawDesc
)

func file_msd_proto_rawDescGZIP() []byte {
	file_msd_proto_rawDescOnce.Do(func() {
		file_msd_proto_rawDescData = protoimpl.X.CompressGZIP(file_msd_proto_rawDescData)
	})
	return file_msd_proto_rawDescData
}

var file_msd_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_msd_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_msd_proto_goTypes = []interface{}{
	(UpdateMode)(0),                 // 0: msd.UpdateMode
	(UpdateRowFormat)(0),            // 1: msd.UpdateRowFormat
	(FilterMode)(0),                 // 2: msd.FilterMode
	(ForwardOp)(0),                  // 3: msd.ForwardOp
	(*GetParams)(nil),               // 4: msd.GetParams
	(*GetDataFrameRequest)(nil),     // 5: msd.GetDataFrameRequest
	(*GetDataFrameResponse)(nil),    // 6: msd.GetDataFrameResponse
	(*UpdateRowBinary)(nil),         // 7: msd.UpdateRowBinary
	(*CsvOption)(nil),               // 8: msd.CsvOption
	(*ScriptOption)(nil),            // 9: msd.ScriptOption
	(*UpdateRowOption)(nil),         // 10: msd.UpdateRowOption
	(*UpdateDataFrameRequest)(nil),  // 11: msd.UpdateDataFrameRequest
	(*UpdateDataFrameResponse)(nil), // 12: msd.UpdateDataFrameResponse
	(*UpdateMetaRequest)(nil),       // 13: msd.UpdateMetaRequest
	(*UpdateMetaResponse)(nil),      // 14: msd.UpdateMetaResponse
	(*Filter)(nil),                  // 15: msd.Filter
	(*GetTableRequest)(nil),         // 16: msd.GetTableRequest
	(*GetTableResponse)(nil),        // 17: msd.GetTableResponse
	(*ListObjectRequest)(nil),       // 18: msd.ListObjectRequest
	(*ListObjectResponse)(nil),      // 19: msd.ListObjectResponse
	(*BinlogRecord)(nil),            // 20: msd.BinlogRecord
	(*ForwardRequest)(nil),          // 21: msd.ForwardRequest
	(*ForwardDetail)(nil),           // 22: msd.ForwardDetail
	(*ForwardResponse)(nil),         // 23: msd.ForwardResponse
	(*SqlRequest)(nil),              // 24: msd.SqlRequest
	(*SqlResponse)(nil),             // 25: msd.SqlResponse
	nil,                             // 26: msd.GetDataFrameRequest.AddonsEntry
	nil,                             // 27: msd.GetDataFrameResponse.AddonsEntry
	nil,                             // 28: msd.CsvOption.CsvColMappingByPrefixEntry
	nil,                             // 29: msd.GetTableResponse.SchemasEntry
	nil,                             // 30: msd.ListObjectResponse.ObjectsEntry
	nil,                             // 31: msd.ListObjectResponse.RecordsEntry
	nil,                             // 32: msd.ForwardResponse.ForwardsEntry
	nil,                             // 33: msd.SqlResponse.AddonsEntry
	(*DataFrame)(nil),               // 34: dataframe.DataFrame
	(*Schema)(nil),                  // 35: schema.Schema
	(*DataFrameIndex)(nil),          // 36: dataframe.DataFrameIndex
}
var file_msd_proto_depIdxs = []int32{
	4,  // 0: msd.GetDataFrameRequest.params:type_name -> msd.GetParams
	26, // 1: msd.GetDataFrameRequest.addons:type_name -> msd.GetDataFrameRequest.AddonsEntry
	34, // 2: msd.GetDataFrameResponse.values:type_name -> dataframe.DataFrame
	27, // 3: msd.GetDataFrameResponse.addons:type_name -> msd.GetDataFrameResponse.AddonsEntry
	28, // 4: msd.CsvOption.csv_col_mapping_by_prefix:type_name -> msd.CsvOption.CsvColMappingByPrefixEntry
	1,  // 5: msd.UpdateRowOption.format:type_name -> msd.UpdateRowFormat
	8,  // 6: msd.UpdateRowOption.csv:type_name -> msd.CsvOption
	9,  // 7: msd.UpdateRowOption.script:type_name -> msd.ScriptOption
	0,  // 8: msd.UpdateDataFrameRequest.mode:type_name -> msd.UpdateMode
	10, // 9: msd.UpdateDataFrameRequest.rowsOption:type_name -> msd.UpdateRowOption
	2,  // 10: msd.Filter.mode:type_name -> msd.FilterMode
	15, // 11: msd.GetTableRequest.nameFilter:type_name -> msd.Filter
	29, // 12: msd.GetTableResponse.schemas:type_name -> msd.GetTableResponse.SchemasEntry
	15, // 13: msd.ListObjectRequest.objFilter:type_name -> msd.Filter
	30, // 14: msd.ListObjectResponse.objects:type_name -> msd.ListObjectResponse.ObjectsEntry
	31, // 15: msd.ListObjectResponse.records:type_name -> msd.ListObjectResponse.RecordsEntry
	13, // 16: msd.BinlogRecord.Meta:type_name -> msd.UpdateMetaRequest
	11, // 17: msd.BinlogRecord.DataFrame:type_name -> msd.UpdateDataFrameRequest
	3,  // 18: msd.ForwardRequest.operation:type_name -> msd.ForwardOp
	32, // 19: msd.ForwardResponse.forwards:type_name -> msd.ForwardResponse.ForwardsEntry
	34, // 20: msd.SqlResponse.values:type_name -> dataframe.DataFrame
	33, // 21: msd.SqlResponse.addons:type_name -> msd.SqlResponse.AddonsEntry
	35, // 22: msd.GetTableResponse.SchemasEntry.value:type_name -> schema.Schema
	36, // 23: msd.ListObjectResponse.ObjectsEntry.value:type_name -> dataframe.DataFrameIndex
	34, // 24: msd.ListObjectResponse.RecordsEntry.value:type_name -> dataframe.DataFrame
	22, // 25: msd.ForwardResponse.ForwardsEntry.value:type_name -> msd.ForwardDetail
	5,  // 26: msd.ApiV1.Get:input_type -> msd.GetDataFrameRequest
	18, // 27: msd.ApiV1.ListObject:input_type -> msd.ListObjectRequest
	11, // 28: msd.ApiV1.Update:input_type -> msd.UpdateDataFrameRequest
	16, // 29: msd.ApiV1.GetTable:input_type -> msd.GetTableRequest
	13, // 30: msd.ApiV1.UpdateMeta:input_type -> msd.UpdateMetaRequest
	21, // 31: msd.ApiV1.Forward:input_type -> msd.ForwardRequest
	24, // 32: msd.ApiV1.SqlQuery:input_type -> msd.SqlRequest
	6,  // 33: msd.ApiV1.Get:output_type -> msd.GetDataFrameResponse
	19, // 34: msd.ApiV1.ListObject:output_type -> msd.ListObjectResponse
	12, // 35: msd.ApiV1.Update:output_type -> msd.UpdateDataFrameResponse
	17, // 36: msd.ApiV1.GetTable:output_type -> msd.GetTableResponse
	14, // 37: msd.ApiV1.UpdateMeta:output_type -> msd.UpdateMetaResponse
	23, // 38: msd.ApiV1.Forward:output_type -> msd.ForwardResponse
	25, // 39: msd.ApiV1.SqlQuery:output_type -> msd.SqlResponse
	33, // [33:40] is the sub-list for method output_type
	26, // [26:33] is the sub-list for method input_type
	26, // [26:26] is the sub-list for extension type_name
	26, // [26:26] is the sub-list for extension extendee
	0,  // [0:26] is the sub-list for field type_name
}

func init() { file_msd_proto_init() }
func file_msd_proto_init() {
	if File_msd_proto != nil {
		return
	}
	file_dataframe_proto_init()
	file_schema_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_msd_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msd_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataFrameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msd_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDataFrameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msd_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRowBinary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msd_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CsvOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msd_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScriptOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msd_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRowOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msd_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDataFrameRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msd_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateDataFrameResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msd_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMetaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msd_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateMetaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msd_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Filter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msd_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msd_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msd_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msd_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListObjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msd_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BinlogRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msd_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msd_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msd_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msd_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_msd_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_msd_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_msd_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_msd_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_msd_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*BinlogRecord_Meta)(nil),
		(*BinlogRecord_DataFrame)(nil),
	}
	file_msd_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_msd_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_msd_proto_msgTypes[21].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_msd_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_msd_proto_goTypes,
		DependencyIndexes: file_msd_proto_depIdxs,
		EnumInfos:         file_msd_proto_enumTypes,
		MessageInfos:      file_msd_proto_msgTypes,
	}.Build()
	File_msd_proto = out.File
	file_msd_proto_rawDesc = nil
	file_msd_proto_goTypes = nil
	file_msd_proto_depIdxs = nil
}
