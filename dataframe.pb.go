// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.18.1
// source: dataframe.proto

package msd

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 字段类型
type FieldKind int32

const (
	// 空类型
	FieldKind_Empty FieldKind = 0
	// Int64 类型, 8字节
	FieldKind_Int64 FieldKind = 393216
	// DateTime 类型，timestamp, 一般基于local，单位纳秒 1/1e9 秒，是 Int64 的子类型
	FieldKind_DateTime FieldKind = 393217
	// Decimal 类型， 8字节， 是 Int64 的子类型
	FieldKind_Decimal64 FieldKind = 393218
	// UInt64 类型， 8字节
	FieldKind_UInt64 FieldKind = 393219
	// Int8 1字节
	FieldKind_UInt8 FieldKind = 524289
	// Float64 8字节
	FieldKind_Float64 FieldKind = 917504
	// 字符串类型
	FieldKind_String FieldKind = 1048576
)

// Enum value maps for FieldKind.
var (
	FieldKind_name = map[int32]string{
		0:       "Empty",
		393216:  "Int64",
		393217:  "DateTime",
		393218:  "Decimal64",
		393219:  "UInt64",
		524289:  "UInt8",
		917504:  "Float64",
		1048576: "String",
	}
	FieldKind_value = map[string]int32{
		"Empty":     0,
		"Int64":     393216,
		"DateTime":  393217,
		"Decimal64": 393218,
		"UInt64":    393219,
		"UInt8":     524289,
		"Float64":   917504,
		"String":    1048576,
	}
)

func (x FieldKind) Enum() *FieldKind {
	p := new(FieldKind)
	*p = x
	return p
}

func (x FieldKind) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FieldKind) Descriptor() protoreflect.EnumDescriptor {
	return file_dataframe_proto_enumTypes[0].Descriptor()
}

func (FieldKind) Type() protoreflect.EnumType {
	return &file_dataframe_proto_enumTypes[0]
}

func (x FieldKind) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FieldKind.Descriptor instead.
func (FieldKind) EnumDescriptor() ([]byte, []int) {
	return file_dataframe_proto_rawDescGZIP(), []int{0}
}

// Series 是一系列值的数组
type Series struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 数值的名称
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// 值的类型
	Dtype FieldKind `protobuf:"varint,2,opt,name=dtype,proto3,enum=dataframe.FieldKind" json:"dtype,omitempty"`
	// 标量(scalar，单值具有固定的长度)类型，存储于 datas 字段, 如 int64, datetime, float64, uint8 等
	Datas []byte `protobuf:"bytes,15,opt,name=datas,proto3" json:"datas,omitempty"`
	// 字符串类型，存储于 texts 字段中
	Texts []string `protobuf:"bytes,16,rep,name=texts,proto3" json:"texts,omitempty"`
}

func (x *Series) Reset() {
	*x = Series{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataframe_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Series) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Series) ProtoMessage() {}

func (x *Series) ProtoReflect() protoreflect.Message {
	mi := &file_dataframe_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Series.ProtoReflect.Descriptor instead.
func (*Series) Descriptor() ([]byte, []int) {
	return file_dataframe_proto_rawDescGZIP(), []int{0}
}

func (x *Series) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Series) GetDtype() FieldKind {
	if x != nil {
		return x.Dtype
	}
	return FieldKind_Empty
}

func (x *Series) GetDatas() []byte {
	if x != nil {
		return x.Datas
	}
	return nil
}

func (x *Series) GetTexts() []string {
	if x != nil {
		return x.Texts
	}
	return nil
}

// DataFrame 是由若干 Series 组成，形成表格形式的数据结果
type DataFrame struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// pk is the sn of primary key of dataframe, default is the first columns, pk column should be sorted
	PkCol       int32  `protobuf:"varint,1,opt,name=pk_col,json=pkCol,proto3" json:"pk_col,omitempty"`
	DistinctCol *int32 `protobuf:"varint,2,opt,name=distinct_col,json=distinctCol,proto3,oneof" json:"distinct_col,omitempty"`
	// columns is the dataframe datas
	Columns []*Series `protobuf:"bytes,15,rep,name=columns,proto3" json:"columns,omitempty"`
}

func (x *DataFrame) Reset() {
	*x = DataFrame{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataframe_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataFrame) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFrame) ProtoMessage() {}

func (x *DataFrame) ProtoReflect() protoreflect.Message {
	mi := &file_dataframe_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFrame.ProtoReflect.Descriptor instead.
func (*DataFrame) Descriptor() ([]byte, []int) {
	return file_dataframe_proto_rawDescGZIP(), []int{1}
}

func (x *DataFrame) GetPkCol() int32 {
	if x != nil {
		return x.PkCol
	}
	return 0
}

func (x *DataFrame) GetDistinctCol() int32 {
	if x != nil && x.DistinctCol != nil {
		return *x.DistinctCol
	}
	return 0
}

func (x *DataFrame) GetColumns() []*Series {
	if x != nil {
		return x.Columns
	}
	return nil
}

// 一个单独的索引块信息
type DataFrameIndexBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 起始标识值，标识是一行数据的ID，如自增的ID，时间戳等
	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start,omitempty"`
	// 结尾标识值，标识是一行数据的ID，如自增的ID，时间戳等
	Stop int64 `protobuf:"varint,2,opt,name=stop,proto3" json:"stop,omitempty"`
	// 该块中的数据条数
	Rows uint32 `protobuf:"varint,3,opt,name=rows,proto3" json:"rows,omitempty"`
}

func (x *DataFrameIndexBlock) Reset() {
	*x = DataFrameIndexBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataframe_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataFrameIndexBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFrameIndexBlock) ProtoMessage() {}

func (x *DataFrameIndexBlock) ProtoReflect() protoreflect.Message {
	mi := &file_dataframe_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFrameIndexBlock.ProtoReflect.Descriptor instead.
func (*DataFrameIndexBlock) Descriptor() ([]byte, []int) {
	return file_dataframe_proto_rawDescGZIP(), []int{2}
}

func (x *DataFrameIndexBlock) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *DataFrameIndexBlock) GetStop() int64 {
	if x != nil {
		return x.Stop
	}
	return 0
}

func (x *DataFrameIndexBlock) GetRows() uint32 {
	if x != nil {
		return x.Rows
	}
	return 0
}

// DataFrameIndex 是一组 DataFrame 的索引信息
type DataFrameIndex struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 总行数 SUM(blocks.row) == total_rows
	TotalRows uint32 `protobuf:"varint,1,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"`
	// 每组的最大行数，从 schema 获取
	MaxRowsPerBlock uint32 `protobuf:"varint,2,opt,name=max_rows_per_block,json=maxRowsPerBlock,proto3" json:"max_rows_per_block,omitempty"`
	// 在内存中缓存的最大行数，从 schema 获取
	MaxRowsInMemory uint32 `protobuf:"varint,5,opt,name=max_rows_in_memory,json=maxRowsInMemory,proto3" json:"max_rows_in_memory,omitempty"`
	// 所有数据的起始标识值，标识是一行数据的ID，如自增的ID，时间戳等
	// start = blocks.first.start
	Start int64 `protobuf:"varint,3,opt,name=start,proto3" json:"start,omitempty"`
	// 所有数据的结尾标识值，标识是一行数据的ID，如自增的ID，时间戳等
	// stop = blocks.last.stop
	Stop int64 `protobuf:"varint,4,opt,name=stop,proto3" json:"stop,omitempty"`
	// 索引块列表
	Blocks []*DataFrameIndexBlock `protobuf:"bytes,10,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *DataFrameIndex) Reset() {
	*x = DataFrameIndex{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dataframe_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataFrameIndex) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataFrameIndex) ProtoMessage() {}

func (x *DataFrameIndex) ProtoReflect() protoreflect.Message {
	mi := &file_dataframe_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataFrameIndex.ProtoReflect.Descriptor instead.
func (*DataFrameIndex) Descriptor() ([]byte, []int) {
	return file_dataframe_proto_rawDescGZIP(), []int{3}
}

func (x *DataFrameIndex) GetTotalRows() uint32 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

func (x *DataFrameIndex) GetMaxRowsPerBlock() uint32 {
	if x != nil {
		return x.MaxRowsPerBlock
	}
	return 0
}

func (x *DataFrameIndex) GetMaxRowsInMemory() uint32 {
	if x != nil {
		return x.MaxRowsInMemory
	}
	return 0
}

func (x *DataFrameIndex) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *DataFrameIndex) GetStop() int64 {
	if x != nil {
		return x.Stop
	}
	return 0
}

func (x *DataFrameIndex) GetBlocks() []*DataFrameIndexBlock {
	if x != nil {
		return x.Blocks
	}
	return nil
}

var File_dataframe_proto protoreflect.FileDescriptor

var file_dataframe_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x22, 0x74, 0x0a, 0x06,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x64, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x05, 0x64, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x64, 0x61, 0x74, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x65, 0x78, 0x74, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x74, 0x65, 0x78,
	0x74, 0x73, 0x22, 0x88, 0x01, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x70, 0x6b, 0x5f, 0x63, 0x6f, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x70, 0x6b, 0x43, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x69,
	0x6e, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x0b, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x43, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x2e, 0x53, 0x65, 0x72,
	0x69, 0x65, 0x73, 0x52, 0x07, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x42, 0x0f, 0x0a, 0x0d,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x22, 0x53, 0x0a,
	0x13, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74,
	0x6f, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x72, 0x6f,
	0x77, 0x73, 0x22, 0xeb, 0x01, 0x0a, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x72,
	0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x52, 0x6f, 0x77, 0x73, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x77, 0x73,
	0x5f, 0x70, 0x65, 0x72, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x6d, 0x61, 0x78, 0x52, 0x6f, 0x77, 0x73, 0x50, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x5f, 0x69, 0x6e,
	0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d,
	0x61, 0x78, 0x52, 0x6f, 0x77, 0x73, 0x49, 0x6e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x04, 0x73, 0x74, 0x6f, 0x70, 0x12, 0x36, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63,
	0x6b, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73,
	0x2a, 0x7c, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x09, 0x0a,
	0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x10, 0x80, 0x80, 0x18, 0x12, 0x0e, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x10, 0x81, 0x80, 0x18, 0x12, 0x0f, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c,
	0x36, 0x34, 0x10, 0x82, 0x80, 0x18, 0x12, 0x0c, 0x0a, 0x06, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x10, 0x83, 0x80, 0x18, 0x12, 0x0b, 0x0a, 0x05, 0x55, 0x49, 0x6e, 0x74, 0x38, 0x10, 0x81, 0x80,
	0x20, 0x12, 0x0d, 0x0a, 0x07, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x10, 0x80, 0x80, 0x38,
	0x12, 0x0c, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x10, 0x80, 0x80, 0x40, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dataframe_proto_rawDescOnce sync.Once
	file_dataframe_proto_rawDescData = file_dataframe_proto_rawDesc
)

func file_dataframe_proto_rawDescGZIP() []byte {
	file_dataframe_proto_rawDescOnce.Do(func() {
		file_dataframe_proto_rawDescData = protoimpl.X.CompressGZIP(file_dataframe_proto_rawDescData)
	})
	return file_dataframe_proto_rawDescData
}

var file_dataframe_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_dataframe_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_dataframe_proto_goTypes = []interface{}{
	(FieldKind)(0),              // 0: dataframe.FieldKind
	(*Series)(nil),              // 1: dataframe.Series
	(*DataFrame)(nil),           // 2: dataframe.DataFrame
	(*DataFrameIndexBlock)(nil), // 3: dataframe.DataFrameIndexBlock
	(*DataFrameIndex)(nil),      // 4: dataframe.DataFrameIndex
}
var file_dataframe_proto_depIdxs = []int32{
	0, // 0: dataframe.Series.dtype:type_name -> dataframe.FieldKind
	1, // 1: dataframe.DataFrame.columns:type_name -> dataframe.Series
	3, // 2: dataframe.DataFrameIndex.blocks:type_name -> dataframe.DataFrameIndexBlock
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_dataframe_proto_init() }
func file_dataframe_proto_init() {
	if File_dataframe_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dataframe_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Series); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataframe_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataFrame); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataframe_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataFrameIndexBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dataframe_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataFrameIndex); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_dataframe_proto_msgTypes[1].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dataframe_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_dataframe_proto_goTypes,
		DependencyIndexes: file_dataframe_proto_depIdxs,
		EnumInfos:         file_dataframe_proto_enumTypes,
		MessageInfos:      file_dataframe_proto_msgTypes,
	}.Build()
	File_dataframe_proto = out.File
	file_dataframe_proto_rawDesc = nil
	file_dataframe_proto_goTypes = nil
	file_dataframe_proto_depIdxs = nil
}
